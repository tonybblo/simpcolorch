{"version":3,"sources":["App.js","index.js"],"names":["Square","_ref","value","onSquareClick","_jsx","className","onClick","children","Board","_ref2","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","rows","row","rowSquares","col","index","push","_jsxs","_Fragment","Game","history","setHistory","useState","Array","boardSize","fill","currentMove","setCurrentMove","currentSquares","moves","map","move","description","nextHistory","length","lines","start","a","b","c","d","e","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.ad4f2596.chunk.js","sourcesContent":["// App.js\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  const boardSize = 15;\n  const rows = [];\n  for (let row = 0; row < boardSize; row++) {\n    const rowSquares = [];\n    for (let col = 0; col < boardSize; col++) {\n      const index = row * boardSize + col;\n      rowSquares.push(\n        <Square\n          key={index}\n          value={squares[index]}\n          onSquareClick={() => handleClick(index)}\n        />\n      );\n    }\n    rows.push(\n      <div key={row} className=\"board-row\">\n        {rowSquares}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {rows}\n    </>\n  );\n}\n\nexport default function Game() {\n  const boardSize = 15;\n  const [history, setHistory] = useState([Array(boardSize * boardSize).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const boardSize = 15;\n  const lines = [];\n\n  for (let row = 0; row < boardSize; row++) {\n    for (let col = 0; col < boardSize; col++) {\n      const start = row * boardSize + col;\n\n      if (col + 4 < boardSize) {\n        lines.push([start, start + 1, start + 2, start + 3, start + 4]);\n      }\n      if (row + 4 < boardSize) {\n        lines.push([start, start + boardSize, start + 2 * boardSize, start + 3 * boardSize, start + 4 * boardSize]);\n      }\n      if (row + 4 < boardSize && col + 4 < boardSize) {\n        lines.push([start, start + boardSize + 1, start + 2 * (boardSize + 1), start + 3 * (boardSize + 1), start + 4 * (boardSize + 1)]);\n      }\n      if (row + 4 < boardSize && col - 4 >= 0) {\n        lines.push([start, start + boardSize - 1, start + 2 * (boardSize - 1), start + 3 * (boardSize - 1), start + 4 * (boardSize - 1)]);\n      }\n    }\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c, d, e] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d] && squares[a] === squares[e]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"],"sourceRoot":""}